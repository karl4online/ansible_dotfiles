#!/bin/bash

set -e

# color codes
NC="\\e[0m"
GREEN="\\e[32m"
CYAN="\e[00;36m"
SEA="\\e[38;5;49m"
LRED="\\e[01;31m"
LGREEN="\\e[01;32m"
OVERWRITE="\\e[1A\\e[K"

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"

# Paths
ID=""
DOTFILES_DIR="$HOME/Dotfiles"
DOTFILES_LOG="$HOME/dotfiles.log"

function __task {
  # if _task is called while a task was set, complete the previous
  if [[ $TASK != "" ]]; then
    printf "%b\n" "${OVERWRITE}${LGREEN} [✓] ${LGREEN}${TASK}"
  fi
  # set new task title and print
  TASK=$1
  printf "%b" "${GREEN} [ ] ${TASK} \n${LRED}"
}

# _cmd performs commands with error checking
function _cmd {
  #create log if it doesn't exist
  if ! [[ -f $DOTFILES_LOG ]]; then
    touch "$DOTFILES_LOG"
  fi
  # empty conduro.log
  echo "empty" > "$DOTFILES_LOG"
  # hide stdout, on error we print and exit
  if eval "$1" 1> /dev/null 2> "$DOTFILES_LOG"; then
    return 0 # success
  fi
  # read error from log and add spacing
  printf "%b\n" "${OVERWRITE}${LRED} [X] ${TASK}${LRED}"
  while read -r line; do
    printf "    %s\n" "$line"
  done < "$DOTFILES_LOG"
  printf "\n"
  # remove log file
  rm "$DOTFILES_LOG"
  # exit installation
  exit 1
}

function _clear_task {
  TASK=""
}

function _task_done {
  printf "%b\n" "${OVERWRITE}${LGREEN} [✓] ${LGREEN}${TASK}"
  _clear_task
}

function ansible_arch_setup() {
  if ! [ -x "$(command -v ansible)" ]; then
    __task "Installing Ansible"
    _cmd "sudo pacman -S --noconfirm --needed ansible"
    _cmd "sudo pacman -S --noconfirm --needed python-argcomplete"
  fi

  if ! pacman -Q python3 >/dev/null 2>&1; then
    __task "Installing Python3"
    _cmd "sudo pacman -S --noconfirm --needed python3"
  fi

  if ! pacman -Q python-pip >/dev/null 2>&1; then
    __task "Installing Python3 Pip"
    _cmd "sudo pacman -S --noconfirm --needed python-pip"
  fi

  if ! pip3 list | grep watchdog >/dev/null 2>&1; then
    __task "Installing Python3 Watchdog"
    _cmd "sudo pacman -S --noconfirm --needed python-watchdog"
  fi

  if ! pacman -Q openssh >/dev/null 2>&1; then
    __task "Installing OpenSSH"
    _cmd "sudo pacman -S --noconfirm --needed openssh"
  fi
}

update_ansible_galaxy() {
  local os=$1
  local os_requirements=""
  __task "Updating Ansible Galaxy"
  if [ -f "$DOTFILES_DIR/requirements/$os.yml" ]; then
    __task "${OVERWRITE}Updating Ansible Galaxy with OS Config: $os"
    os_requirements="$DOTFILES_DIR/requirements/$os.yml"
  fi
  _cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements/common.yml $os_requirements"
}

detect_os() {
  if [ -f /etc/os-release ]; then
    source /etc/os-release
    echo $ID
  else
    uname -s | tr '[:upper:]' '[:lower:]'
  fi
}

#######################################################
# Script start
#######################################################

dotfiles_os=$(detect_os)

__task "Loading Setup for detected OS: $dotfiles_os"

case $dotfiles_os in
  arch)
    ansible_arch_setup
    ;;
  cachyos)
    ansible_arch_setup
    ;;
  *)
    __task "Unsupported OS"
    _cmd "echo 'Unsupported OS'"
    ;;
esac

if ! [[ -d "$DOTFILES_DIR" ]]; then
  __task "Cloning repository. NOT!!!!!!!!!"
  # _cmd "git clone --quiet https://github.com/karl4online/ansible_dotfiles.git $DOTFILES_DIR"
else
  __task "The dotfiles repository already exists. Make sure to keep it UP TO DATE!"
fi

pushd "$DOTFILES_DIR" > /dev/null 2>&1

update_ansible_galaxy "$dotfiles_os"

ansible-playbook "$DOTFILES_DIR/main.yml" "$@" --ask-become-pass

popd > /dev/null 2>&1

echo -e "${CHECK_MARK} ${GREEN}dotfiles script finished!${NC}"
echo -e "${ARROW} ${CYAN}Please reboot your computer if this script installed many new programs!${NC}"

# vi:ft=bash:
