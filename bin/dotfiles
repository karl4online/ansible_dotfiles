#!/bin/bash

# color codes
NC='\033[0m'
GREEN='\033[00;32m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
OVERWRITE='\e[1A\e[K'
# RESTORE='\033[0m'
# BLACK='\033[00;30m'
# RED='\033[00;31m'
# YELLOW='\033[00;33m'
# BLUE='\033[00;34m'
# PURPLE='\033[00;35m'
# LIGHTGRAY='\033[00;37m'
# LYELLOW='\033[01;33m'
# LBLUE='\033[01;34m'
# LPURPLE='\033[01;35m'
# LCYAN='\033[01;36m'
# WHITE='\033[01;37m'

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
# X_MARK="${RED}\xE2\x9C\x96${NC}"
# PIN="${RED}\xF0\x9F\x93\x8C${NC}"
# CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
# BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
# HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
# WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
# RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"



set -e

# Paths
ID=""
DOTFILES_LOG="$HOME/Documents/dotfiles.log"
DOTFILES_DIR="$HOME/Dotfiles"
IS_FIRST_RUN="$HOME/Documents/dotfiles_run"
# _header colorize the given argument with spacing
function __task {
  # if _task is called while a task was set, complete the previous
  if [[ $TASK != "" ]]; then
    printf "%s%s [✓]  %s%s\n" "$OVERWRITE" "$LGREEN" "$LGREEN" "$TASK"
  fi
  # set new task title and print
  TASK=$1
  printf "%s [ ]  %s \n%s" "$LBLACK" "$TASK" "$LRED"
}

# _cmd performs commands with error checking
function _cmd {
  #create log if it doesn't exist
  if ! [[ -f $DOTFILES_LOG ]]; then
    touch "$DOTFILES_LOG"
  fi
  # empty conduro.log
  echo "start..." > "$DOTFILES_LOG"
  # hide stdout, on error we print and exit
  if eval "$1" 1> /dev/null 2> "$DOTFILES_LOG"; then
    return 0 # success
  fi
  # read error from log and add spacing
  printf "%s%s [X]  %s%s\n" "$OVERWRITE" "$LRED" "$TASK" "$LRED"
  while read -r line; do
    printf "      %s\n" "$line"
  done < "$DOTFILES_LOG"
  printf "\n"
  # remove log file
  rm "$DOTFILES_LOG"
  # exit installation
  exit 1
}

function _clear_task {
  TASK=""
}

function _task_done {
  printf "%s%s [✓]  %s%s\n" "$OVERWRITE" "$LGREEN" "$LGREEN" "$TASK"
  _clear_task
}

function arch_setup() {
  if ! [ -x "$(command -v ansible)" ]; then
    __task "Installing Ansible"
    _cmd "sudo pacman -Sy --noconfirm"
    _cmd "sudo pacman -S --noconfirm --needed ansible"
    _cmd "sudo pacman -S --noconfirm --needed python-argcomplete"
    # _cmd "sudo activate-global-python-argcomplete3"
  fi
  if ! pacman -Q python3 >/dev/null 2>&1; then
    __task "Installing Python3"
    _cmd "sudo pacman -S --noconfirm --needed python3"
  fi
  if ! pacman -Q python-pip >/dev/null 2>&1; then
    __task "Installing Python3 Pip"
    _cmd "sudo pacman -S --noconfirm --needed python-pip"
  fi
  if ! pip3 list | grep watchdog >/dev/null 2>&1; then
    __task "Installing Python3 Watchdog"
    _cmd "sudo pacman -S --noconfirm --needed python-watchdog"
  fi

  if ! pacman -Q openssh >/dev/null 2>&1; then
    __task "Installing OpenSSH"
    _cmd "sudo pacman -S --noconfirm --needed openssh"
  fi

  # __task "Setting Locale"
  # _cmd "sudo localectl set-locale LANG=en_US.UTF-8"
}

update_ansible_galaxy() {
  local os=$1
  local os_requirements=""
  __task "Updating Ansible Galaxy"
  if [ -f "$DOTFILES_DIR/requirements/$os.yml" ]; then
    __task "${OVERWRITE}Updating Ansible Galaxy with OS Config: $os"
    os_requirements="$DOTFILES_DIR/requirements/$os.yml"
  fi
  _cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements/common.yml $os_requirements"
}

detect_os() {
  if [ -f /etc/os-release ]; then
    source /etc/os-release
    echo $ID
  else
    uname -s | tr '[:upper:]' '[:lower:]'
  fi
}

dotfiles_os=$(detect_os)
__task "Loading Setup for detected OS: $dotfiles_os"
case $dotfiles_os in
  arch)
    arch_setup
    ;;
  cachyos)
    arch_setup
    ;;
  *)
    __task "Unsupported OS"
    _cmd "echo 'Unsupported OS'"
    ;;
esac

if ! [[ -d "$DOTFILES_DIR" ]]; then
  __task "Cloning repository"
  _cmd "git clone --quiet https://github.com/karl4online/ansible_dotfiles.git $DOTFILES_DIR"
else
  __task "Updating repository"
  _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

pushd "$DOTFILES_DIR" > /dev/null 2>&1

update_ansible_galaxy "$ID"

ansible-playbook "$DOTFILES_DIR/main.yml" "$@"

popd > /dev/null 2>&1

if ! [[ -f "$IS_FIRST_RUN" ]]; then
  echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
  echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
  touch "$IS_FIRST_RUN"
fi

# vi:ft=sh:
